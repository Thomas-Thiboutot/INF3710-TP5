{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Subject } from \"rxjs\";\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let CommunicationService = /*#__PURE__*/(() => {\n  class CommunicationService {\n    constructor(http) {\n      this.http = http; // À DÉCOMMENTER ET À UTILISER LORSQUE VOTRE COMMUNICATION EST IMPLÉMENTÉE\n      // private readonly BASE_URL: string = \"http://localhost:3000/database\";\n      // public constructor(private readonly http: HttpClient) {}\n\n      this.existingIDs = [];\n      this.medecins_column_name = [];\n      this.medecins_row_data = [];\n      this._listeners = new Subject();\n      this.baseUrl = 'http://localhost:3000';\n    }\n\n    listen() {\n      return this._listeners.asObservable();\n    }\n\n    filter(filterBy) {\n      this._listeners.next(filterBy);\n    }\n\n    getMedecinData() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.getMedecin().subscribe(medecins => {\n          console.log(typeof JSON.parse(medecins.body));\n          console.log(Object.keys(JSON.parse(medecins.body)[0])); //this.medecins_row_data = JSON.parse(JSON.stringify(medecins.rows));\n          //const fields = JSON.parse(JSON.stringify(medecins.fields));\n          //this.medecins_column_name = fields.map((obj : any) => obj.name);\n        });\n      });\n    }\n\n    getMedecin() {\n      return this.http.get(`${this.baseUrl}/database`, {\n        observe: 'response',\n        responseType: 'text'\n      });\n    }\n\n  }\n\n  CommunicationService.ɵfac = function CommunicationService_Factory(t) {\n    return new (t || CommunicationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  CommunicationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CommunicationService,\n    factory: CommunicationService.ɵfac\n  });\n  return CommunicationService;\n})();","map":null,"metadata":{},"sourceType":"module"}